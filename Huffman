#include <stdio.h>
#include <stdlib.h>
#include "pair.h"
#include "buildhuff.h"
#include "list2.h"

table arr[256];
int num = 0;
char a[256];

void build_table(pair * root, int pl) {
    if (root->left) {
        ///добавить 0;
        a[pl] = 0;
        build_table(root->left, pl + 1);
    }
    if (root->right) {
        ///добавить 1;
        a[pl] = 1;
        build_table(root->right, pl + 1);
    }
    if (!root->right && !root->left) {
        ///добавить букву;
        arr[num].val = root->val;
        arr[num].cnt = pl;
        int i;
        for (i = 0; i < pl; ++i) {
            arr[num].str[i] = a[i];
        }
        ++num;
    }

}

int main() {
    int N = 1000;
    int i;
    unsigned char x;
    unsigned char * str = (unsigned char *)malloc(N * sizeof(unsigned char));
    for (i = 0; i < N; ++i) {
        x = getchar();
        str[i] = x;
    }
    pair * treehuf = NULL;
    treehuf = build_huff(str, N);

    build_table(treehuf, 0);
    int j;
    for (i = 0; i < 256; ++i) {
        printf("%c: ", arr[i].val);
        for (j = 0; j < arr[i].cnt; ++j)
            printf("%d", (int)arr[i].str[j]);
        printf("\n");
    }
    tree_free(treehuf);

    unsigned char buf = 0;
    int cntbuf = 0;
    int k;
    unsigned char * strnew = (unsigned char *)malloc(N * sizeof(unsigned char));
    for (i = 0; i < N; ++i) {
        strnew[i] = 0;
    }
    int curnum;
    int y = 0;
    for (i = 0; i < N; ++i) {
        unsigned char c = str[i];
        j = 0;
        while (arr[j].val != c)
            ++j;
        curnum = j;
        for (k = 0; k < arr[curnum].cnt; ++k) {
            if (cntbuf == 8) {
                cntbuf = 0;
                strnew[y++] = buf;
                buf == 0;
            }
            buf = (buf << 1) | arr[curnum].str[k];
            cntbuf++;
        }
    }
    while (cntbuf != 8) {
        buf = buf << 1;
        cntbuf++;
    }
    strnew[y] = buf;
    for (i = 0; i < N; ++i) {
        printf("%d ", (int)strnew[i]);
    }
    free(str);
    free(strnew);
    return 0;
}
